//huge thanks to niemand for helping me with this filter
float GetLinearDepth(float depth) {
   return (2.0 * near) / (far + near - depth * (far - near));
}

const vec2 blurOffsets[48] = vec2[48](
   vec2(0.09276153676905054, 0.006451184528156975),
   vec2(-0.13965016932818936, 0.12586212645266198),
   vec2(0.010651564792133054, -0.22089271139478756),
   vec2(0.1549967345213613, 0.2207478798274548),
   vec2(-0.3108062335794673, -0.046880928075854575),
   vec2(0.27631198161853693, -0.17523212015441458),
   vec2(-0.10483233337854896, 0.36182470960711055),
   vec2(-0.1914900343051356, -0.3443436082660665),
   vec2(0.38597780044200564, 0.15080619896823866),
   vec2(-0.4205217789636129, 0.1761973358136119),
   vec2(0.1889352764312806, -0.4171672318920973),
   vec2(0.1371906870447479, 0.47348828685412686),
   vec2(-0.45082678243682406, -0.24942230030154144),
   vec2(0.5086600110679104, -0.10742098871752587),
   vec2(-0.325403794747644, 0.45607554223764785),
   vec2(-0.0823277082420676, -0.5570944646952537),
   vec2(0.43901467653060716, 0.3842917201392757),
   vec2(-0.6125922813922516, 0.03139919226814622),
   vec2(0.4307544811623662, -0.4314623328147401),
   vec2(-0.03874192137328758, 0.6431482905513332),
   vec2(-0.42801429728937795, -0.4953078406144288),
   vec2(0.6539882946596366, 0.09569575854763165),
   vec2(-0.5713038204374059, 0.3974784318006458),
   vec2(0.14427108689711493, -0.6761900755939505),
   vec2(0.34590263810092625, 0.6263280851173355),
   vec2(-0.7036887551469747, -0.21507759666582832),
   vec2(0.6652092501687413, -0.30518944488727506),
   vec2(-0.30151502890680715, 0.7046827769904411),
   vec2(-0.27009553221331484, -0.7186253423779688),
   vec2(0.6846469590548614, 0.3711705391734545),
   vec2(-0.7801015967710405, 0.2096318704825802),
   vec2(0.42882810692952444, -0.6749395201185054),
   vec2(0.13007077231734263, 0.8174129418224926),
   vec2(-0.6697982594637475, -0.5050753776009759),
   vec2(0.835596076747595, -0.063546772772912),
   vec2(-0.5933021935330178, 0.63773986425655),
   vec2(-0.005046586786914907, -0.8655571701245159),
   vec2(0.5845676613009447, 0.6611041952264586),
   vec2(-0.9010698332337244, -0.07619779351495182),
   vec2(0.713296405417368, -0.5419741313920409),
   vec2(-0.17370745496385234, 0.9101770085181972),
   vec2(-0.5045330533724546, -0.7805228219794594),
   vec2(0.8982018648931299, 0.2551599686869026),
   vec2(-0.8562566621129739, 0.4410950849574538),
   vec2(0.32540289767150965, -0.8963538580609455),
   vec2(0.3577920084876002, 0.908204881809559),
   vec2(-0.898724702629551, -0.41506352641680455),
   vec2(0.9413220415818909, -0.28663591620462314)
);

vec3 NormalAwareBlur(int samples) {
    vec3 blur = vec3(0.0);
    vec3 normal = normalize(DecodeNormal(texture2D(colortex6, texCoord).xy));
    vec2 viewResolution = 1.0 / vec2(viewWidth, viewHeight);

	float z0 = texture2D(depthtex0, texCoord.xy).x;
	float depth0 = GetLinearDepth(z0);

    float totalWeight = 0.0;

    for(int i = 0; i < samples; i++){
        vec2 offset = blurOffsets[i] * viewResolution * 48.0 * float(z0 > 0.56);

		vec3 currentNormal = normalize(DecodeNormal(texture2D(colortex6, texCoord + offset).xy));

        float currentDepth = texture2D(depthtex0, texCoord + offset).x;
        float currentDepthLinear = GetLinearDepth(currentDepth);
        float depthDifference = exp2(1.0 - abs(currentDepthLinear - depth0));
        float normalDifference = dot(normal, currentNormal);
        float weight = pow8(clamp(depthDifference * normalDifference, 0.001, 1.0));

        blur += weight * texture2D(colortex7, texCoord + offset).rgb;
        totalWeight += weight;
    }
    
    return blur / totalWeight;
}